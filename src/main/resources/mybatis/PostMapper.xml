<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.service.core.post.repository.mapper.PostMapper">
    <select id="findRecentPostCardDto" resultType="com.service.core.post.dto.PostCardDto">
        select post.post_id,
               post.title,
               post.thumbnail_image,
               date_format(post.register_time, '%y.%m.%d %H:%i') as register_time,
               post.blog_id
        from post
                 inner join blog b on b.blog_id = #{blogId} and b.is_delete != true
        where post.blog_id = b.blog_id
          and post.is_delete != true
        order by post.register_time desc
            limit #{recentPopularPostCount};
    </select>

    <select id="findTotalPostDtoListByPaging" parameterType="com.service.core.post.dto.PostSearchDto"
            resultType="com.service.core.post.dto.PostDto">
        select post.post_id,
               post.title,
               post.thumbnail_image,
               summary,
               post.writer,
               date_format(post.register_time, '%y.%m.%d %H:%i') as register_time,
               CASE
                   WHEN ((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true) is null)
                       THEN c.name
                   ELSE CONCAT((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true), '/', c.name)
        END                                           as category,
               c.category_id,
               b.blog_id
        from post
                 inner join category c on post.category_id = c.category_id and c.is_delete != true
                 inner join blog b
        on b.blog_id = #{blogId} and b.is_delete != true
        where post_id in (select post_id from post where blog_id = b.blog_id
        and is_delete = false order by blog_id)
        and post.is_delete != true
        order by post.register_time desc LIMIT #{postSearchPagingDto.postPagination.limitStart},
        #{postSearchPagingDto.recordSize}
    </select>

    <select id="findCategoryPostDtoListByPaging" parameterType="com.service.core.post.dto.PostSearchDto"
            resultType="com.service.core.post.dto.PostDto">
        select post.post_id,
               post.title,
               post.thumbnail_image,
               summary,
               post.writer,
               date_format(post.register_time, '%y.%m.%d %H:%i') as register_time,
               CASE
                   WHEN ((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true) is null)
                       THEN c.name
                   ELSE CONCAT((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true), '/', c.name)
        END                                           as category,
               c.category_id,
               b.blog_id
        from post
                 inner join category c on c.category_id = #{categoryId} and c.is_delete != true
        inner join blog b
        on b.blog_id = #{blogId} and b.is_delete != true
        where post_id in
        (select post_id from post p where p.blog_id = b.blog_id
        and p.category_id = c.category_id
        and p.is_delete = false order by p.blog_id)
        order by post.register_time desc
        LIMIT #{postSearchPagingDto.postPagination.limitStart}, #{postSearchPagingDto.recordSize}
    </select>

    <select id="findCategoryPostTitleDtoListByPaging" parameterType="com.service.core.post.dto.PostSearchDto"
            resultType="com.service.core.post.dto.PostTitleDto">
        select post.post_id,
               post.title,
               date_format(post.register_time, '%y.%m.%d %H:%i') as register_time,
               b.blog_id
        from post
                 inner join category c on c.category_id = #{categoryId} and c.is_delete != true
        inner join blog b
        on b.blog_id = #{blogId} and b.is_delete != true
        where post_id in
            (select post_id from post p where p.blog_id = b.blog_id
          and p.category_id = c.category_id
          and p.is_delete = false order by p.blog_id)
        order by post.register_time desc
            LIMIT #{postSearchPagingDto.postPagination.limitStart}, #{postSearchPagingDto.recordSize}
    </select>

    <select id="findPostDeleteDtoById" resultType="com.service.core.post.dto.PostDeleteDto">
        SELECT post.post_id,
               post.seq,
               post.is_delete,
               post.title
        FROM post
        WHERE post_id = #{postId}
    </select>

    <select id="findPostOverViewDtoById" resultType="com.service.core.post.dto.PostOverviewDto">
        SELECT post.post_id,
               date_format(post.register_time, '%Y-%m-%d %H:%i:%s') as register_time,
               date_format(post.update_time, '%Y-%m-%d %H:%i:%s') as update_time
        FROM post
        WHERE post_id = #{postId} and post.is_delete = false
    </select>

    <select id="findPostDtoById" resultType="com.service.core.post.dto.PostDto">
        select post.post_id,
               post.title,
               post.thumbnail_image,
               post.summary,
               post.writer,
               date_format(post.register_time, '%y.%m.%d %H:%i') as register_time,
               CASE
                   WHEN ((select pc.name
                          from category pc
                          where pc.category_id = category.parent_id and pc.is_delete != true) is null)
               THEN category.name
           ELSE CONCAT(
                   (select pc.name from category pc where pc.category_id = category.parent_id and pc.is_delete != true),
            '/', category.name)
        END                                           as category,
       category.category_id,
       post.blog_id
from post
         inner join category on post.category_id = category.category_id and category.is_delete = false
where post_id = #{postId} and post.is_delete = false
    </select>

    <select id="findPostDtoById2" resultType="com.service.core.post.dto.PostDto">
        select post.post_id,
               post.title,
               post.thumbnail_image,
               post.summary,
               post.writer,
               date_format(post.register_time, '%y.%m.%d %H:%i') as register_time,
               CASE
                   WHEN ((select pc.name
                          from category pc
                          where pc.category_id = category.parent_id
                            and pc.is_delete != true) is null)
               THEN category.name
           ELSE CONCAT(
                   (select pc.name from category pc where pc.category_id = category.parent_id and pc.is_delete != true),
            '/', category.name)
        END                                           as category,
       category.category_id,
       post.blog_id
from post
         inner join category on post.category_id = category.category_id and category.is_delete = false
         inner join blog on blog.blog_id = post.blog_id and blog.is_delete = false
where post_id = #{postId}
  and post.blog_id = #{blogId}
  and blog.is_delete = false
  and post.is_delete = false
    </select>

    <select id="existsById" resultType="boolean">
        SELECT IF(COUNT(*) = 1, 1, 0)
        FROM post
        WHERE post_id = #{postId}
    </select>

    <select id="findPostCount" resultType="int">
        SELECT count(*)
        from post
        where blog_id = #{blogId}
    </select>

    <select id="findUndeletePostCount" resultType="int">
        SELECT count(*)
        from post
        where blog_id = #{blogId}
          and is_delete = false
    </select>

    <select id="findPostCountByBlogCategory" resultType="int">
        SELECT count(*)
        from post
        where blog_id = #{blogId}
          and category_id = #{categoryId}
          and is_delete = false
    </select>

    <select id="findPostLinkDtoList" resultType="com.service.core.post.dto.PostLinkDto">
        select CONCAT('/post/', p.post_id, '?blogId=', #{blogId}) as link,
               p.title,
               p.seq
        from post p
        where p.blog_id = #{blogId}
          and p.seq in (
            (select sp.seq
             from post sp
             where sp.blog_id = #{blogId}
               and sp.is_delete = false
               and sp.seq <![CDATA[<]]> #{seq}
             order by sp.seq desc
            limit 1)
            , (
        select sp.seq
        from post sp
        where sp.blog_id = #{blogId}
          and sp.is_delete = false
          and sp.seq <![CDATA[>]]> #{seq}
        order by sp.seq asc limit 1)
            );
    </select>

    <select id="findEqualPostCount" resultType="int">
        select count(*)
        from post p
                 inner join blog b
                            on b.blog_id = #{blogId} and b.is_delete != true
        where p.blog_id = b.blog_id
          and p.post_id = #{postId}
          and p.is_delete != true
    </select>

    <select id="findPostDtoByKeyword" parameterType="com.service.core.post.dto.PostKeywordSearchDto"
            resultType="com.service.core.post.dto.PostSearchMapperDto">
        select post.post_id,
        post.title,
        post.thumbnail_image,
        summary,
        post.writer,
        date_format(post.register_time, '%y.%m.%d %H:%i') as register_time,
        CASE
        WHEN ((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true) is null)
        THEN c.name
        ELSE CONCAT((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true), '/',
        c.name)
        END as category,
        c.category_id,
        b.blog_id,
        (select count(*) from comment where comment.post_id = post.post_id and comment.is_delete != true) as
        commentCount
        from post
        inner join category c on post.category_id = c.category_id and c.is_delete != true
        inner join blog b
        on b.blog_id = #{postKeywordSearchDto.blogId} and b.is_delete != true
        where post_id in
        (select post_id from post where blog_id = b.blog_id
        and
        (<include refid="textSearchQuery"/>)
        order by blog_id)
        and post.is_delete != true
        order by post.register_time desc
        LIMIT #{postKeywordSearchDto.postSearchPagingDto.postPagination.limitStart},
        #{postKeywordSearchDto.postSearchPagingDto.recordSize}
    </select>

    <select id="findPostDtoByTagKeyword" parameterType="com.service.core.post.dto.PostTagKeywordSearchDto"
            resultType="com.service.core.post.dto.PostSearchMapperDto">
        select main_post.post_id,
               main_post.title,
               main_post.thumbnail_image,
               summary,
               main_post.writer,
               date_format(main_post.register_time, '%y.%m.%d %H:%i')           as register_time,
               CASE
                   WHEN ((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true) is null)
               THEN c.name
           ELSE CONCAT((select pc.name from category pc where pc.category_id = c.parent_id and pc.is_delete != true),
            '/', c.name)
        END                                                          as category,
       c.category_id,
       main_post.blog_id,
       (select count(*)
        from comment
        where comment.post_id = main_post.post_id
          and comment.is_delete != true)                                as commentCount
from post main_post
         inner join category c on main_post.category_id = c.category_id and c.is_delete != true
where main_post.post_id in (select DISTINCT tag.post_id
                            from tag
                            where tag.name = CONCAT('#', #{postTagKeywordSearchDto.keyword})
        and tag.post_id in (select post_id
        from post
        inner join blog b on b.blog_id = #{postTagKeywordSearchDto.blogId} and b.is_delete != true
        where post.blog_id = b.blog_id
        and post.is_delete != true))
        and main_post.is_delete != true
        order by main_post.register_time desc
        LIMIT #{postTagKeywordSearchDto.postSearchPagingDto.postPagination.limitStart}, #{postTagKeywordSearchDto.postSearchPagingDto.recordSize};
    </select>

    <select id="findRelatedPost" resultType="com.service.core.post.dto.PostCardDto">
        select post.post_id,
               post.title,
               post.thumbnail_image,
               post.register_time,
               post.blog_id
        from post
                 inner join blog b on b.blog_id = #{blogId} and b.is_delete != true
         inner join category c
        on c.category_id = #{categoryId} and c.is_delete != true
        where post.post_id != #{postId}
          and post.blog_id = b.blog_id
          and post.category_id = c.category_id
          and post.seq
            > #{postSeq}
          and post.is_delete != true
            limit 0, 4;
    </select>

    <select id="findPostDtoCountByKeyword" resultType="int">
        SELECT count(*)
        FROM post p
        WHERE p.blog_id = #{blogId}
        and p.is_delete != true
        and (<include refid="textSearchQuery"/>)
    </select>

    <select id="findPostDtoCountByTagKeyword" resultType="int">
        select count(*)
        from post main_post
        where main_post.post_id in (select DISTINCT tag.post_id
                                    from tag
                                    where tag.name = CONCAT('#', #{keyword})
                                      and tag.post_id in (select post_id
                                                          from post
                                                                   inner join blog b on b.blog_id = #{blogId} and b.is_delete != true
        where post.blog_id = b.blog_id
          and post.is_delete != true))
          and main_post.is_delete != true;
    </select>

    <!-- contents 기준으로 검색할 경우, 크기(메모리) 증가로 인한 OOM 발생 가능성 / summary 기준으로 탐색 -->
    <sql id="textSearchQuery">
        <choose>
            <when test="postKeywordSearchDto.searchType eq 'LIKE'">
                summary like CONCAT('%',#{postKeywordSearchDto.keyword}, '%')
                or title like CONCAT('%',#{postKeywordSearchDto.keyword}, '%')
            </when>

            <when test="postKeywordSearchDto.searchType eq 'FULL-TEXT'">
                MATCH(summary) AGAINST(CONCAT(#{postKeywordSearchDto.keyword}, '*') IN BOOLEAN MODE) or
                MATCH(title) AGAINST(CONCAT(#{postKeywordSearchDto.keyword}, '*') IN BOOLEAN MODE)
            </when>
        </choose>
    </sql>
</mapper>
